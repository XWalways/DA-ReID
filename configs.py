import argparse
parser = argparse.ArgumentParser(description='reid')
#==============================================About Datasets=====================================================
parser.add_argument('--dataset_root', default="./", type=str, help='path of datasets')
parser.add_argument('--batch_id', default=4, type=int, help='number of IDs in a mini-batch')
parser.add_argument('--batch_image', default=32, type=int, help='number of images per ID in a mini-batch')
parser.add_argument('--size_train', default=[384,128], help='image size of the train data')
parser.add_argument('--size_test', default=[384, 128], help='image size of the test data')
parser.add_argument('--pixel_mean', default=[0.485*255, 0.456*255, 0.406*255], help='mean values for normalization')
parser.add_argument('--pixel_std', default=[0.229*255, 0.224*255, 0.225*255], help='std values for normalization')
parser.add_argument('--do_flip', default=True, type=bool, help='do horizontal flip or not')
parser.add_argument('--flip_prob', default=0.5, type=float, help='random probability for image horizontal flip')
parser.add_argument('--do_pad', default=True, type=bool, help='do padding or not')
parser.add_argument('--padding_mode', default='constant', type=str, help='padding mode')
parser.add_argument('--padding', default=10, type=int, help='value of padding size')
parser.add_argument('--do_cj', default=False, type=bool, help='do color jitter or not')
parser.add_argument('--cj_prob', default=0.5, type=float, help='probability for color jitter')
parser.add_argument('--cj_brightness', default=0.15, type=float, help='brightness value for color jitter')
parser.add_argument('--cj_contrast', default=0.15, type=float, help='contrast value for color jitter')
parser.add_argument('--cj_saturation', default=0.1, type=float, help='saturation value for color jitter')
parser.add_argument('--cj_hue', default=0.1, type=float, help='hue value for color jitter')
parser.add_argument('--do_affine', default=False, type=bool, help='do random affine or not')
parser.add_argument('--do_autoaug', default=False, type=bool, help='do auto augmentation or not')
parser.add_argument('--autoaug_prob', default=0.1, type=float, help='probability for auto augmentation')
parser.add_argument('--do_augmix', default=False, type=bool, help='do augmix augmentation or not')
parser.add_argument('--augmix_prob', default=0.5, type=float, help='probability for augmix augmentation')
parser.add_argument('--do_rea', default=True, type=bool, help='do random erasing or not')
parser.add_argument('--rea_prob', default=0.5, type=float, help='probability for random erasing')
parser.add_argument('--rea_value', default=[0.485*255, 0.456*255, 0.406*255], help='random erasing value')
parser.add_argument('--do_rpt', default=False, type=bool, help='do random patch or not')
parser.add_argument('--rpt_prob', default=0.5, type=float, help='probability for random patch')
parser.add_argument('--num_classes', default=751, type=int, help='number of classes in datasets')
parser.add_argument('--datasets', default=['Market1501',], help='datasets for training')
parser.add_argument('--datasets_test', default=['Market1501',], help='datasets for tests')
parser.add_argument('--combineall', default=False, type=bool, help='use train+val or not')
parser.add_argument('--batch_test', default=128, type=int, help='batch size for test inference')
parser.add_argument('--num_workers', default=8, type=int, help='number of workers for data loding')
#===============================================About Model========================================================
parser.add_argument('--model_name', default='baseline', type=str, help='full model options')
parser.add_argument('--backbone_name', default='resnet', type=str, help='backbone options')
parser.add_argument('--depth', default='50x', type=str, help='depth for backbone')
parser.add_argument('--last_stride', default=1, type=int, help='last stride for backbone, 1 or 2')
parser.add_argument('--feat_dim', default=2048, type=int, help='feature dimension for backbone')
parser.add_argument('--backbone_norm', default='BN', type=str, help='normalization method for the backbone convolution layers')
parser.add_argument('--with_ibn', default=False, type=bool, help='use IBN block in backbone or not')
parser.add_argument('--with_se', default=False, type=bool, help='use SE layer in backbone or not')
parser.add_argument('--with_nl', default=False, type=bool, help='use Non local block in backbone or not')
parser.add_argument('--pretrained', default=True, type=bool, help='use ImageNet pretrain model or not')
parser.add_argument('--pretrained_path', default='', type=str, help='pretrained model path')
parser.add_argument('--head_norm', default='BN', type=str, help='normalization method for the head convolution layers')
parser.add_argument('--embedding_dim', default=0, type=int, help='embedding dimension in head')
parser.add_argument('--with_bnneck', default=True, type=bool, help='use BNneck in embedding or not')
parser.add_argument('--neck_feat', default='before', type=str, help='triplet feature using feature before(after) bnneck')
parser.add_argument('--pool_type', default='avgpool', type=str, help='pooling layer type in head')
parser.add_argument('--cls_type', default='linear', type=str, help='classification layer type')
parser.add_argument('--margin', default=0.15, type=float, help='margin for margin-based classification layer')
parser.add_argument('--scale', default=128, type=int, help='scale for margin-based classification layer')
parser.add_argument('--loss_names', default=["CrossEntropyLoss",], help='reid loss options')
parser.add_argument('--ce_epsilon', default=0.0, type=float, help='epsilon = 0 means no label smooth, epsilon = -1 means label smooth')
parser.add_argument('--ce_alpha', default=0.2, type=float, help='alpha for cross entropy loss')
parser.add_argument('--ce_scale', default=1.0, type=float, help='scale for cross entropy loss')
parser.add_argument('--tri_margin', default=0.3, type=float, help='margin for triplet loss')
parser.add_argument('--tri_norm_feat', default=False, type=bool, help='norm feature or not')
parser.add_argument('--tri_hard_mining', default=True, type=bool, help='hard mining or not')
parser.add_argument('--tri_scale', default=1.0, type=float, help='scale for triplet loss')
parser.add_argument('--circle_margin', default=0.25, type=float, help='margin for circle loss')
parser.add_argument('--circle_gamma', default=128, type=int, help='gamma for circle loss')
parser.add_argument('--circle_scale', default=1.0, type=float, help='scale for circle loss')
#=============================================Log && Save===========================================================
parser.add_argument('--log_dir', default='./log', type=str, help='path to save logs')
parser.add_argument('--save_dir', default='./weights', type=str, help='path to save weights')
parser.add_argument('--log_name', default='Baseline_resnet50_market1501', type=str, help='name of the log file')
parser.add_argument('--log_interval', default=50, type=int, help='interval fro logging')
parser.add_argument('--eval_interval', default=10, type=int, help='interval for eval inference')
parser.add_argument('--save_interval', default=10, type=int, help='interval for save weights')
parser.add_argument('--resume', default=False, type=bool, help='use resume checkpoint or not')
parser.add_argument('--resume_weights', default='', type=str, help='resume weights')
cfg = parser.parse_args()




